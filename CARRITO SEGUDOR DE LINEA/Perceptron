# Inicialización del perceptrón
class Perceptron:
    def __init__(self, num_inputs):
        # Inicializa los pesos y el sesgo
        self.weights = [0.0] * num_inputs
        self.bias = 0.0

    def predict(self, inputs):
        # Realiza la predicción basada en las entradas y los pesos
        activation = sum(x * w for x, w in zip(inputs, self.weights)) + self.bias
        return 1 if activation >= 0 else 0

    def train(self, training_inputs, labels, learning_rate=0.1, epochs=10):
        # Entrena el perceptrón ajustando los pesos
        for epoch in range(epochs):
            print(f"Epoch {epoch + 1}:")
            for inputs, label in zip(training_inputs, labels):
                prediction = self.predict(inputs)
                error = label - prediction
                # Actualiza los pesos basado en el error y la tasa de aprendizaje
                self.weights = [w + learning_rate * error * x for x, w in zip(inputs, self.weights)]
                self.bias += learning_rate * error
                # Imprime los pesos y el sesgo después de cada actualización
                print(f"Weights: {self.weights}, Bias: {self.bias}")
        

##################################################
                
perceptron = None
# Verifica si el botón está presionado para entrenar el perceptrón
button_pin = board.GP22
button = digitalio.DigitalInOut(button_pin)
button.switch_to_input(pull=digitalio.Pull.UP)

# Variable global para almacenar el valor del PWM del perceptrón
perceptron_pwm_value = 100

# Función para entrenar el perceptrón cuando se presiona el botón A
def train_perceptron():
    global pwm_value
    perceptron = Perceptron(num_inputs=3)  # Inicializar el perceptrón con el número de características de entrada
    training_inputs = [[1, 1, 1], [0, 1, 1], [0, 0, 0],[1, 1, 1], [0, 1, 1], [0, 0, 0],[1, 1, 1], [0, 1, 1], [0, 0, 0],[1, 1, 1], [0, 1, 1], [0, 0, 0],
                       [1, 1, 1], [0, 1, 1], [0, 0, 0],[1, 1, 1], [0, 1, 1], [0, 0, 0]]  # Datos de entrenamiento
    labels = [1, 1, 0,1, 1, 0,1, 1, 0,1, 1, 0,1, 1, 0,1, 1, 0]  # Ejemplo de etiquetas correspondientes
    perceptron.train(training_inputs, labels, learning_rate=0.1, epochs=5)  # Entrenar el perceptrón con los datos de entrenamiento durante varias épocas
    # Hacer una predicción con valores arbitrarios para obtener el valor de PWM
    pwm_value = perceptron.predict([1, 1, 1]) * 65530  # Ajustar el valor de PWM basado en la predicción del perceptrón

# Inicializar el perceptrón al principio
train_perceptron()
